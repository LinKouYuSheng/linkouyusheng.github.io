<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MPLS上</title>
      <link href="/2019/06/02/MPLS%E4%B8%8A/"/>
      <url>/2019/06/02/MPLS%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="MPLS（Multi-Protocol-Label-Switching）多协议标签交换-——-上"><a href="#MPLS（Multi-Protocol-Label-Switching）多协议标签交换-——-上" class="headerlink" title="MPLS（Multi-Protocol Label Switching）多协议标签交换 —— 上"></a>MPLS（Multi-Protocol Label Switching）多协议标签交换 —— 上</h1><p><br></p><h2 id="MPLS-简介"><a href="#MPLS-简介" class="headerlink" title="MPLS 简介"></a>MPLS 简介</h2><p>MPLS 全称是 Multi-Protocol Label Switching —— 多协议标签交换；MPLS 从中文名字中就可以看出两个重点，分别是多协议和标签交换。</p><p><strong>多协议：</strong>MPLS 基于二层，在二层之上三层之下。同时该协议可以与其他上层协议互相配合。</p><p><strong>标签交换：</strong>MPLS 在三层之下意味着不需要数据进行三层转发，同时 MPLS 会分配标签，通过标签来实现转发平面的决策。</p><p><br></p><p><br></p><h2 id="MPLS-产生背景"><a href="#MPLS-产生背景" class="headerlink" title="MPLS 产生背景"></a><strong>MPLS 产生背景</strong></h2><p>MPLS 早期是为了解决数据包转发效率低下的问题而出现的。早期的路由器都是通过软件的方式来进行报文转发处理，并且硬件性能较差（现在的路由器会用CPU计算出一个不用递归下一跳的 FIB 表，然后用专门的硬件来根据 FIB 转发数据）。而早期还有一种解决方案是 ATM 技术（此处不是指提款机(╯▔皿▔)╯），这种技术虽然转发效率还不错，但是技术比较复杂，部署难度和维护成本都很高。</p><p><br></p><p>于是 MPLS 在这种背景下横空出世，MPLS 借鉴了 ATM 的标签转发和面向连接特点。凭着转发效率的优势 MPLS 很受客户的欢迎。但是随着芯片技术、硬件性能的提升，MPLS 的优势渐渐褪去，转发效率渐渐与 IP 转发拉不开差距。现在，MPLS 已经被扩展到了新的应用领域，为网络提供其他的帮助，最常见的有 MPLS VPN 或 MPLS TE （流量工程）。</p><p><br></p><p><br></p><h2 id="MPLS-网络结构"><a href="#MPLS-网络结构" class="headerlink" title="MPLS 网络结构"></a>MPLS 网络结构</h2><p>LSR （Label Switching Router）是标签交换路由器，LSR 具有标签分配和基于标签转发数据报文的能力。用户的 IP 数据流进入 MPLS 域之后，报文会以标签的方式经过每一台 LSR。为了转发标签的数据报文，每台 LSR 都会建立一张标签转发表，标签转发表就是通过标签分发协议依据路由表产生和建立的。</p><p><br></p><p>LER （Label Edge ROuter）是标签边界路由器，LER 具有标签分配能力。LER 有入站的 LER 和出站的 LER。入站 LER 负载对数据报文压入标签，然后转发进入 MPLS 网络；出站的 LER 负责给离开 MPLS 网络的数据报文移除标签，然后根据 IP 转发表进行转发。</p><p><br></p><p>LSP（Label Switching Path）是标签转发路径。LSP 就是流量在进入 MPLS 后以及出 MPLS 之前所经过的隧道路径，一条 LSP 的开端是入站 LER，结尾是出站 LER。这里所说的 LSP 是一条单向的，也就是说数据回来的时候所走的 LSP 又是一条另外的 LSP。而 LSP 是支持嵌套的，即一个 LSP 可以建立在 另一条 LSP 的里面。这种操作通常会在 ISP 运营商网络中使用，即数据报文中压一层私网标签，然后再压一条公网标签使其可以利用公网 MPLS 传输。LSP 有动态和静态两种建立方式，下文详解。</p><p><br></p><p>FEC（Forwarding Equivalent Class）是转发等价类，用来描述具有相同特征的报文在转发过程中被 LSR 以相同方式处理，也就是说一个 FEC 的数据报文走的是同一条 LSP。划分 FEC 的方式又很多，比如去往相同目的前缀的报文就是一个 FEC ，还有五元组（原目IP、原目端口、协议）、VPN等。</p><p><br></p><p><br></p><h2 id="MPLS-报文格式"><a href="#MPLS-报文格式" class="headerlink" title="MPLS 报文格式"></a>MPLS 报文格式</h2><p>MPLS 的报文格式很简单，由 Label Value 、Exp 、 S  、 TTL 一共四个字段组成，整个MPLS 字段介于二层封装和网络层封装中间，一共 32 位。</p><p><br></p><p>Label Value 顾名思义用来表示标签值，这个字段由 20 位，意味着标签值大小可表达范围在 0 到 1048575 ，标签值 0 到 15 是特殊用途的标签，这里不作详细讨论。</p><p><br></p><p>Exp 是一个 3 bit 的实验字段，在 MPLS 设计之初还没有确定该字段的作用，现在主要用来做 QoS。</p><p><br></p><p>S 位叫栈底位（BoS，Bootom of Stack）。只有在最靠近网络层封装的 MPLS 字段，S 位才会置为 1 ，其余时候都是0。这种情况一般都是多个标签嵌套，如前文 LSP 中的描述。而多层嵌套并不是 Label Value 字段有多个，而是多个整体的 MPLS 字段有多个，理论无限叠加。</p><p><br></p><p>TTL（Time to Live）该字段与 IP 报头中的 TTL作用、大小是一样的，在 MPLS 网络中每进行一次标签交换操作，最外层标签中的 TTL 就减一，TTL 一旦减为 0，报文就因为防止环路的原因会被丢弃。IP 报文进入 MPLS 网络后，标签的 TTL 值可以初始化为 255，也可以直接复制 IP 头中的 TTL 值。 </p><p><br><br></p><h2 id="LSP-建立"><a href="#LSP-建立" class="headerlink" title="LSP 建立"></a>LSP 建立</h2><p>LSP 可以静态和动态建立。动态建立 LSP 是使用标签分发协议（比如 LDP）建立，静态就是手工配置，所以静态 LSP 不需要使用任何标签分发协议，没有必要交互任何控制信息，资源开销小。由于静态 LSP 是由手工配置的，无法随着网络拓扑变化而收敛，当网络出现故障后还需要管理员干预，管理相对比较麻烦。也许你会心想，既然显得毫无用处，我为什么还要写这么多来描述静态的方式。这是因为静态 LSP 可以避免像 LDP 故障导致 MPLS 业务流量丢失的情况，静态可以保障 MPLS 中关键应用的数据业务连续性。</p><p><br></p><p><strong>静态 LSP：</strong>一条静态 LSP 有三种角色，Ingress、Transit、Egress。Ingress 节点负责为接收到的 IP 报文压入标签并送入 LSP 隧道，Transit 节点负责以标签交换的方式转发报文，Egress节点负责一处报文中的标签并将报文转发至 IP 网络。手工配置的时候，前一节点出标签的值等于下一个节点入标签的值。</p><p><br></p><ul><li>在 Ingress 节点配置此 LSP 的目的地址、下一跳和出标签的值。</li><li>在 Transit 配置 LSP 的入接口、与上一节点出标签相等的入标签的值、对应的下一跳和出标签的值。</li><li>在 Egress 配置此 LSP 的入接口及与上一届点出标签相等的入标签的值</li></ul><p><br></p><p>从配置方法来说就可以看出，当为多条 LSP 以静态的方式建立时，操作会相当的复杂和麻烦，所以静态 LSP 配置只适合为关键业务提供保障。</p><p><br></p><blockquote><p>当同一条 FEC 的 LSP 被静态和动态的方式同时建立，这个时候会优先走动态，即使动态切换了线路，除非动态故障，否则只会按动态建立的 LSP 去转发流量</p></blockquote><p><br></p><p><br></p><p>LDP 的内容较多，留到下一章去写；如果可能的话，下一章可能会把 MPLS VPN 和 三种跨域解决方案也写上</p>]]></content>
      
      
      <categories>
          
          <category> HuaWei Routing &amp; Switch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 理论 </tag>
            
            <tag> MPLS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BGP状态机与邻居建立</title>
      <link href="/2019/05/26/BGP%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E9%82%BB%E5%B1%85%E5%BB%BA%E7%AB%8B/"/>
      <url>/2019/05/26/BGP%E7%8A%B6%E6%80%81%E6%9C%BA%E4%B8%8E%E9%82%BB%E5%B1%85%E5%BB%BA%E7%AB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="BGP邻居建立"><a href="#BGP邻居建立" class="headerlink" title="BGP邻居建立"></a>BGP邻居建立</h1><p><br></p><h2 id="BGP邻居类型"><a href="#BGP邻居类型" class="headerlink" title="BGP邻居类型"></a>BGP邻居类型</h2><blockquote><p>BGP 的邻居有 IBGP 和 EBGP ，不同的邻居类型在发布路由中有差异</p></blockquote><ol><li>IBGP：AS 区域内的 BGP 邻居是 IBGP 邻居</li><li>EBGP：AS 区域间的 BGP 邻居是 EBGP 邻居</li></ol><p><br></p><h2 id="BGP-的-Router-ID"><a href="#BGP-的-Router-ID" class="headerlink" title="BGP 的 Router-ID"></a>BGP 的 Router-ID</h2><ol><li>像 OSPF 一样，BGP 也有自己的 Router-ID ，功能相同且必须唯一；若建立邻居双方的 Router-ID 相同则无法建立邻居；</li><li>BGP 的 Router-ID 可以手动配置，包括全局下配置和进程下配置(进程下配置优于全局配置)；BGP 也可以从自身设备上选取地址来作为 Router-ID ； 一般会先选 Loopback 接口的 IPv4 地址；如果没有配置 Loopback 接口就会选择接口中最大的 IPv4 地址作为 Router-ID 。一旦选出，除非进程重启或接口地址删除，否则即使配置了更大的地址也会保持原来的 Router-ID；</li></ol><p><br></p><h2 id="BGP-状态机"><a href="#BGP-状态机" class="headerlink" title="BGP 状态机"></a>BGP 状态机</h2><blockquote><p>BGP 的有限状态机描述了 BGP 的邻居建立和维护过程，状态机共分为 6 种，分别是 Idle、Connect、Active、OpenSent、OpenConfirm 和 Established。</p></blockquote><p><br></p><ol><li><p><strong>Idle 状态</strong></p><p><strong>BGP空闲状态，在 Idle 状态下 BGP 拒绝邻居发送的连接请求，等待 Start事件；出现 Start 事件 BGP 会开始初始化、重置连接计时器(32s)，发起TCP连接请求，并且开始真挺远端对等体发起连接的端口，并进入 Connect。</strong></p><ul><li>配置 BGP 过程、人工重置进程、路由器重置进程会产生 Start 事件</li><li>任何状态下，收到 Notification 报文或 TCP 拆除链路通知等等的 Error 事件都会进入 Idle 状态</li></ul><p><br></p></li><li><p><strong>Connect 状态</strong></p><p><strong>在该状态，BGP 会启动一个连接重传定时器，等 TCP 连接完成</strong></p><ul><li><p>成功则发送 Open 报文，进入 OpenSent状态</p></li><li><p>如果 TCP 连接失败，那么 BGP 进入 Active 状态</p></li><li><p>如果连接重传定时器超时，BGP 没有收到对方的响应，那么 BGP 会继续尝试和其他 BGP 邻居建立 TCP 连接，停留在 Connect 状态</p></li><li><p>如果发生其他事件（例如错误事件），则返回 Idle 状态</p><p><br></p></li></ul></li><li><p><strong>Active 状态</strong></p><p><strong>在该状态下，BGP 会一直尝试建立 TCP 连接。</strong></p><ul><li><p>连接成功则发送 Open 报文进入 OpenSent 状态</p></li><li><p>失败则停留在该状态下</p></li><li><p>重传定时器超时，仍没有 BGP 对等体的回应则进入 Connect 状态</p></li><li><p>如果发生其他事件（例如错误事件），则返回 Idle 状态</p><p><br></p></li></ul></li><li><p><strong>OpenSent 状态</strong></p><p><strong>双方交互 Open 报文，并对所收Open 报文中的 AS号、版本号、认证码进行检查。</strong></p><ul><li><p>检查无误，发送 Keepalive 报文，且重置 Keepalive 定时器，并转至 OpenConfirm 状态</p></li><li><p>检查有误，发送 Notification 报文给对方（含有错误具体信息），并转至 Idle 状态。</p><p><br></p></li></ul></li><li><p><strong>OpenConfirm 状态</strong></p><p><strong>在该状态下，BGP 等待 Keepalive 或 Notification 报文。</strong></p><ul><li><p>前者情况进入 Established 状态</p></li><li><p>后者情况进入 Idle 状态</p><p><br></p></li></ul></li><li><p><strong>Established 状态</strong></p><p><strong>在该状态下，BGP 会和对等体交换 Update、Keepalive、Route-refresh 报文和 Notification 报文。</strong></p><ul><li>收到正确的 Update、Keepalive报文，那么BGP则正常保持连接</li><li>如果收到错的，BGP就会给对方发 Notification 报文并且进入 Idle 状态</li><li>Route-refresh 报文不会改变 BGP 状态</li><li>收到 Notification 报文进入 Idle</li><li>收到 TCP 拆除链接通知，则断开链接并进入 Idle 状态。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> HuaWei Routing &amp; Switch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BGP </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BGP反射器防环实验</title>
      <link href="/2019/05/26/BGP%E5%8F%8D%E5%B0%84%E5%99%A8%E9%98%B2%E7%8E%AF%E5%AE%9E%E9%AA%8C/"/>
      <url>/2019/05/26/BGP%E5%8F%8D%E5%B0%84%E5%99%A8%E9%98%B2%E7%8E%AF%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="BGP反射器防环机制"><a href="#BGP反射器防环机制" class="headerlink" title="BGP反射器防环机制"></a>BGP反射器防环机制</h1><p><br></p><h2 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h2><p><img src="/2019/05/26/BGP反射器防环实验/BGP反射器防环.png" alt></p><h2 id="二、实验目的"><a href="#二、实验目的" class="headerlink" title="二、实验目的"></a>二、实验目的</h2><blockquote><p>测试 BGP 中关于反射器放环的细节</p></blockquote><ol><li>全部都建立了 IBGP 关系</li><li>R1 和 R2 配置了反射器，都将 R3 和 R4 配置为自己的客户机</li><li>R1 会不会将 3.3.3.3/32 这条路由传递给 R2 ？</li><li>假设 R2 收到了该路由，又会不会传递给 R1 ？</li><li>R1 如果收到会不会产生环路问题？</li></ol><p><br><br></p><h2 id="三、实验过程"><a href="#三、实验过程" class="headerlink" title="三、实验过程"></a>三、实验过程</h2><p><br><br></p><h3 id="1-实验预配说明"><a href="#1-实验预配说明" class="headerlink" title="1. 实验预配说明"></a>1. 实验预配说明</h3><blockquote><p>所有路由器 IP 配置如环境图，路由器均运行 OSPF 且运行 BGP；(环回口宣告在 BGP 而不是OSPF，以 R1 为例)，且更改 R1 的 Cluster-id 与 R2 一致。</p></blockquote><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ospf 1 router-id 1.1.1.1 </span><br><span class="line"> area 0.0.0.0 </span><br><span class="line">  network 12.1.1.1 0.0.0.0 </span><br><span class="line">  network 13.1.1.1 0.0.0.0 </span><br><span class="line">  network 14.1.1.1 0.0.0.0 </span><br><span class="line">#</span><br><span class="line">bgp 100</span><br><span class="line"> peer 12.1.1.2 as-number 100 </span><br><span class="line"> peer 13.1.1.3 as-number 100 </span><br><span class="line"> peer 14.1.1.4 as-number 100 </span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  reflector cluster-id 12.1.1.2//更改 R1 的 Cluter-id 与 R2 一致</span><br><span class="line">  network 1.1.1.1 255.255.255.255 </span><br><span class="line">  peer 12.1.1.2 enable</span><br><span class="line">  peer 13.1.1.3 enable</span><br><span class="line">  peer 13.1.1.3 reflect-client//将 3.3.3.3 配置为反射器的客户端</span><br><span class="line">  peer 14.1.1.4 enable</span><br><span class="line">  peer 14.1.1.4 reflect-client</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="2-查看-R2-的-BGP-路由表"><a href="#2-查看-R2-的-BGP-路由表" class="headerlink" title="2. 查看 R2 的 BGP 路由表"></a>2. 查看 R2 的 BGP 路由表</h3><blockquote><p>我们可以观察到，R2 并没有收到更多的 BGP 路由。这是因为 RR(反射器) 之间会利用一个东西来唯一标识自己反射出去的路由，这个东西就是 Cluster-id；当收到对方的路由时 RR 会检查该路由的 Cluster-id 是否与自己的一致，若一致则代表这是自己反射出来的路由，RR 会丢弃该路由从而保证破除水平分割的环路的同时不会引起路由环路问题。</p></blockquote><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[R2]dis bgp routing-table </span><br><span class="line"></span><br><span class="line"> BGP Local router ID is 12.1.1.2 </span><br><span class="line"> Status codes: * - valid, &gt; - best, d - damped,</span><br><span class="line">               h - history,  i - internal, s - suppressed, S - Stale</span><br><span class="line">               Origin : i - IGP, e - EGP, ? - incomplete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Total Number of Routes: 4</span><br><span class="line">      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn</span><br><span class="line"></span><br><span class="line"> *&gt;i  1.1.1.1/32         12.1.1.1        0          100        0      i</span><br><span class="line"> *&gt;   2.2.2.2/32         0.0.0.0         0                     0      i</span><br><span class="line"> *&gt;i  3.3.3.3/32         23.1.1.3        0          100        0      i</span><br><span class="line"> *&gt;i  4.4.4.4/32         24.1.1.4        0          100        0      i</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="3-恢复-R1-的-Cluster-id"><a href="#3-恢复-R1-的-Cluster-id" class="headerlink" title="3. 恢复 R1 的 Cluster-id"></a>3. 恢复 R1 的 Cluster-id</h3><blockquote><p>恢复 R1 的 Cluster-id 之后，我们再观察 R2 的 BGP 路由表之后发现此时 R2 已经收到了两条路由</p></blockquote><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[R1-bgp]undo reflector cluster-id </span><br><span class="line"></span><br><span class="line">[R2]dis bgp routing-table </span><br><span class="line"></span><br><span class="line"> BGP Local router ID is 12.1.1.2 </span><br><span class="line"> Status codes: * - valid, &gt; - best, d - damped,</span><br><span class="line">               h - history,  i - internal, s - suppressed, S - Stale</span><br><span class="line">               Origin : i - IGP, e - EGP, ? - incomplete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Total Number of Routes: 6</span><br><span class="line">      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn</span><br><span class="line"></span><br><span class="line"> *&gt;i  1.1.1.1/32         12.1.1.1        0          100        0      i</span><br><span class="line"> *&gt;   2.2.2.2/32         0.0.0.0         0                     0      i</span><br><span class="line"> *&gt;i  3.3.3.3/32         23.1.1.3        0          100        0      i</span><br><span class="line"> * i                     13.1.1.3        0          100        0      i</span><br><span class="line"> *&gt;i  4.4.4.4/32         24.1.1.4        0          100        0      i</span><br><span class="line"> * i                     14.1.1.4        0          100        0      i</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h3 id="4-观察-R3-是否收到了自己发布出去的路由"><a href="#4-观察-R3-是否收到了自己发布出去的路由" class="headerlink" title="4. 观察 R3 是否收到了自己发布出去的路由"></a>4. 观察 R3 是否收到了自己发布出去的路由</h3><blockquote><p>我们观察 R3 的 BGP 路由表就会发现，R3 并没有加载 来自 R2 的路由；我们在 R2 上面仔细看 R1 发射出来的 3.3.3.3 路由就会发现，该路由上不但标注了此路由是谁反射，也标明了该路由是谁产生，正式因为 R3 发现这条路由是由自己产生的，所以才忽略了 R2 反射的路由。</p></blockquote><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[R3]dis bgp routing-table </span><br><span class="line"></span><br><span class="line"> BGP Local router ID is 13.1.1.3 </span><br><span class="line"> Status codes: * - valid, &gt; - best, d - damped,</span><br><span class="line">               h - history,  i - internal, s - suppressed, S - Stale</span><br><span class="line">               Origin : i - IGP, e - EGP, ? - incomplete</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Total Number of Routes: 7</span><br><span class="line">      Network            NextHop        MED        LocPrf    PrefVal Path/Ogn</span><br><span class="line"></span><br><span class="line"> *&gt;i  1.1.1.1/32         13.1.1.1        0          100        0      i</span><br><span class="line"> * i                     12.1.1.1        0          100        0      i</span><br><span class="line"> *&gt;i  2.2.2.2/32         23.1.1.2        0          100        0      i</span><br><span class="line"> * i                     12.1.1.2        0          100        0      i</span><br><span class="line"> *&gt;   3.3.3.3/32         0.0.0.0         0                     0      i</span><br><span class="line"> *&gt;i  4.4.4.4/32         14.1.1.4        0          100        0      i</span><br><span class="line"> * i                     24.1.1.4        0          100        0      i</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> // 从 R2 上关于 3.3.3.3 的路由来看，该条路由标注信息信息</span><br><span class="line"> </span><br><span class="line"> [R2]dis bgp routing-table 3.3.3.3</span><br><span class="line"></span><br><span class="line"> BGP routing table entry information of 3.3.3.3/32:</span><br><span class="line"> From: 12.1.1.1 (12.1.1.1)</span><br><span class="line"> Route Duration: 00h00m41s  </span><br><span class="line"> Relay IP Nexthop: 12.1.1.1</span><br><span class="line"> Relay IP Out-Interface: GigabitEthernet0/0/0</span><br><span class="line"> Original nexthop: 13.1.1.3</span><br><span class="line"> Qos information : 0x0</span><br><span class="line"> AS-path Nil, origin igp, MED 0, localpref 100, pref-val 0, valid, internal, pre</span><br><span class="line"> 255, IGP cost 2, not preferred for IGP cost</span><br><span class="line"> Originator:  13.1.1.3// 产生这条路由器的 Router-id</span><br><span class="line"> Cluster list: 12.1.1.1// 反射这条路由器的 Cluster-id</span><br><span class="line"> Not advertised to any peer yet</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h2 id="四、实验总结"><a href="#四、实验总结" class="headerlink" title="四、实验总结"></a>四、实验总结</h2><p><br></p><blockquote><p>因为反射器破除了 AS 内的水平分割原则，所以容易产生环路；但是反射器也带来了新的放环机制。我总结一下，关于反射器的两个放环机制：</p><ol><li>Originator：Originator 属性标明了该路由的原始产生者，对于非反射器的路由器来说有两点，反射器在对路由进行反射的时候是不会将路由反射回去的；当非反射器的路由器收到路由检查 Originator 属性发现是自己产生的则会丢弃不加表。这样对于非反射器的路由器来说不会收到自己发出去的路由。</li><li>Cluster-id：Cluster-id 属性表明了该路由是谁反射的，对于反射器来说这很好的规避了反射器之间互相反射路由的可能性。当 R1 将路由反射出去的时候，如果 R1 从另外一个反射器那里收到了该路由，R1 通过检查 Cluster-id 属性会发现这是自己反射出去的路由从而丢弃。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> HuaWei Routing &amp; Switch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BGP </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STP生成树</title>
      <link href="/2019/05/15/STP%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2019/05/15/STP%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="STP生成树"><a href="#STP生成树" class="headerlink" title="STP生成树"></a>STP生成树</h1><h2 id="诞生背景"><a href="#诞生背景" class="headerlink" title="诞生背景"></a>诞生背景</h2><p>​        <strong>简介：</strong>STP是一个用于局域网中消除环路的协议。运行该协议的设备通过彼此交互信息而发现网络中的环路，并适当对某些端口进行阻塞以消除环路，从有环拓扑变为一个新的无环路拓扑。</p><p>​        <strong>出现的问题：</strong>由于网络中需要多台交换机能够实现冗余备份，需要将交换机连成环形 或 全互联，根据交换机转发原理，收到未知单播帧、广播帧、组播帧会向其它接口泛洪；这个时候由于一份数据会被复制成多份发出去，然后收到帧的交换机又会照做，周而复始环路中不断转发的数据帧就会越来越多就会出现问题。</p><p>​        <strong>解决办法：</strong>这个时候的解决办法是从物理上避免环路，从物理上破环；但是这样做的话当有链路不能传输数据时，对网管人员来说不方便操作实现切换链路，而STP可以在破除环路的同时代替人来自动的实现链路故障的切换。</p><h2 id="环路影响"><a href="#环路影响" class="headerlink" title="环路影响"></a>环路影响</h2><ol><li>广播风暴导致网络不可用，在环路里的数据越来越多，导致设备最终宕机。</li><li>MAC 地址表震荡导致 MAC 地址表象被破坏（也叫 MAC 地址表漂移）。交换机学习MAC地址的方式：数据帧进入交换机，将接该帧的源 MAC 地址与接收端口绑定，如果从其它接口又收到该帧，该帧携带的MAC 地址又会与另一个端口绑定从而覆盖原先的绑定关系，导致原本应该发往该接口的数据帧被转发到其他不能到目的设备的接口；一个接口能绑定多个 MAC 地址，一个 MAC 地址只能与一个接口绑定。</li></ol><h2 id="STP交换机角色和端口角色"><a href="#STP交换机角色和端口角色" class="headerlink" title="STP交换机角色和端口角色"></a>STP交换机角色和端口角色</h2><ol><li>Root Bridge    （根桥）</li><li>根端口           （Root Port）</li><li>指定端口       （Designated Port）</li><li>阻塞端口       （Blocking port）</li></ol><p><strong>根桥：</strong>树形的网络结构必须有树根，于是STP引入了根桥（Root Bridge）概念。对于一个STP网络，根桥在全网中只有一个，它是整个网络的逻辑中心，但不一定是物理中心。根桥会根据网络拓扑的变化而动态变化；</p><p><strong>根端口：</strong>根端口就是去往根桥路径开销最小的端口</p><p><strong>指定端口：</strong>指定端口可以向其他交换机传递根桥想要传递的信息</p><p><strong>阻塞端口：</strong>顾名思义，该端口将不能转发用户数据流量</p><h2 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h2><p><strong>在 RFC官方文档 中定义了五种端口状态：</strong></p><p>Forwarding状态：端口既转发用户流量也处理BPDU报文。只有根端口或指定端口才能进入Forwarding状态。</p><p>Learning  设备会根据收到的用户流量构建MAC地址表，但不转发用户流量。  过渡状态，增加Learning状态防止临时环路。  </p><p>Listening  确定端口角色，将选举出根桥、根端口和指定端口。  过渡状态。  </p><p>Blocking  端口仅仅接收并处理BPDU，不转发用户流量。  阻塞端口的最终状态。 </p><p>Disabled  端口不仅不处理BPDU报文，也不转发用户流量。  端口状态为Down。</p><p>​        <strong>华为设备缺省情况处于MSTP模式，当从MSTP模式切换到STP模式，运行STP协议的设备上端口支持的端口状态仍然保持和MSTP支持的端口状态一样，支持的状态仅包括Forwarding、Learning和Discarding；Discarding 包括了 Listening 到 DIsabled 三种状态</strong></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>选举根桥和端口角色有四或五个参数比较，从上往下比；当某一条比出结果则不再向下比较。这些参数会携带在BPDU报文中，运行STP的交换机会根据BPDU报文中的参数来协商工作</p><ol><li>根桥ID：该ID描述为当前根桥是谁，在收到更优的根桥ID之前默认是自己的桥ID。越小越优</li><li>根路径开销：描述本交换机到根桥的开销是多少，越小越优</li><li>桥ID：由优先级+自身MAC地址组成；优先级默认是32768，可修改，但必须是4096的倍数，越小越优</li><li>端口ID：由优先级+发送出的端口号组成；优先级默认是128，可修改，但必须是16的倍数，越小越优</li></ol><p><strong>STP选举角色过程：</strong></p><ol><li>选根桥，每台交换机都会认为自己是根桥并向每个接口发出自己的BPDU；如果收到根桥ID更优（优先级更小）的BPDU，则自己不会再是根桥从而认定更优的ID交换机是根桥。</li><li>选根端口，当交换机知道自己不是根桥之后就会将收到最优BPDU的端口作为根端口RP；每个交换机上只能存在一个RP。</li><li>选指定端口，根桥的所有接口一般都是指定端口，但是绝对不会出现根端口；非根桥交换机会试图将根端口以外的端口作为指定端口并发送根桥的BPDU；如果接口对端发送的BPDU是次优（不是最优，或更差的），接口就会成为指定端口；</li><li>如果非根交换机在根端口以外的接口收到更优的BPDU，则该接口即不能成为根端口也不能成为指定端口，就会变成阻塞端口，端口角色选举完毕即破除环路（阻塞端口已经实现破环）</li></ol><p>角色选举完毕端口并不能立即实现转发用户数据流量，华为设备由Discarding 转变到 Learning 状态需要15秒，这个时候开始学习用户 MAC 地址，再从 Learning 状态转变到 Forwarding 状态需要15秒，这一阶段的等待转变是为了防止选举角色过程中产生临时环路。端口转变到 Forwarding 状态之前都不会转发用户数据流量，15秒是转发延迟（可调整）</p><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><ol><li>Hello Time：该计时器决定了 BPDU 发送的间隔时间（BPDU只能由指定接口发送），该计时器的修改只有再根桥修改后才有效，TCN BPDU 的发送不受该计时器影响</li><li>Forwarding Delay：新选出的根端口和指定端口要经过2倍的转发延时才能进入转发状态，这个延时保证了新的配置BPDU消息可以传遍整个STP网络，从而方式临时环路的产生</li><li>Max Age：端口的BPDU报文老化时间，可在根桥上通过命令人为改动老化时间。如果这个时间内没收到上游BPDU，则交换机会尝试将自己作为根桥来向所有端口发送自己的BPDU。</li></ol><h2 id="拓扑变动"><a href="#拓扑变动" class="headerlink" title="拓扑变动"></a>拓扑变动</h2><p>​        如果由链路出现 Down 或 Up 会引起拓扑变动，出现变动的路由器会不停向上游发送TCN BPDU，上游交换机会回复TCA置位的BPDU令其停止发送TCN BPDU，并不停向上游转发TCN BPDU；如此反复至根桥收到为止，根桥收到后会向所有接口发出TC 置位的BPDU，下游交换机收到该BPDU后清空自己的所有MAC地址映射并进行重新学习，这会引起交换机的端口状态变为Discarding，并且重新进入转发状态，意味着STP网络至少有30秒不能够转发用户数据流量</p><h2 id="BPDU"><a href="#BPDU" class="headerlink" title="BPDU"></a>BPDU</h2><p>​        BPDU 报文封装在以太网数据帧中，目的 MAC 是组播 MAC： 01-80-C2-00-00-00，Length/Type 字段为 MAC数据长度，后面是 LLC 头，LLC 之后是BPDU 报文头。（通常所说的BPDU报文多为配置BPDU）</p><blockquote><p>配置BPDU只会在三种情况下产生：</p><ol><li>只要使能STP，则配置BPDU就会按照 Hello Time 定时器规定的时间间隔，从指定端口发出。</li><li>当根端口收到配置 BPDU时，根端口所在的设备会向自己的每一个指定端口复制一份配置BPDU</li><li>当指定端口收到比自己更差的配置 BPDU 时，会立刻向下游设备发送自己的BPDU。</li></ol></blockquote><h2 id="STP-的不足"><a href="#STP-的不足" class="headerlink" title="STP 的不足"></a>STP 的不足</h2><ol><li><p>STP 没有细致区分端口状态和端口角色</p><ul><li>从用户角度来说，Listening 、 Learning 和 Blocking 状态并没有区别，都不转发用户流量</li><li>从使用和配置角度来说，端口之间最本质的区别不再端口状态，而是在于端口扮演的角色。</li></ul><p>根端口和指定端口可以都处于Listening状态，也可能都处于 Forwarding 状态。</p></li><li><p>STP 算法是被动算法，以定时器等待的方式判断拓扑变化，收敛速度缓慢</p></li><li><p>STP 收敛的过程中即使是再稳定的拓扑，配置BPDU 也只能从根桥传遍整个STP网络</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HuaWei Routing &amp; Switch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层笔记</title>
      <link href="/2019/05/09/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/09/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="IP地址划分作业"><a href="#IP地址划分作业" class="headerlink" title="IP地址划分作业"></a>IP地址划分作业</h2><p><strong>题目：</strong></p><p>​        <u>192.168.0.0/18 有5个部门，每个部门有256人；有10个部门，每个部门有128人； 有20个部门，每个部门有64人； 有40个部门，每个部门有32人</u></p><h4 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h4><p>​        其实这道题本应该是按照一贯的套路去从需求数量多的地址、网段开始划分（像有类地址分A、B、C类地址一样）。但是仔细确定需求的时候你也许会发现，一共四个划分网段的需求，每个需求所需要的地址数量是一样的，那就意味着像有类地址划分的话可能会出现地址危机。</p><h4 id="二、划分步骤"><a href="#二、划分步骤" class="headerlink" title="二、划分步骤"></a>二、划分步骤</h4><p>​        题目要求的特点已经再思路部分说明完毕，接下来我们来谈谈关于这种特殊需求（指划分需求之间的地址书相差不大的情况下）该如何划分地址。那既然四个需求所要求的地址数一样，我们完全可以将网段一分为四，一个子网对应一个需求。对应好后然后再用该子网针对每个需求所要求的划分网段，一分为四后的子网地址数是满足每一个需求最低的可用地址数。</p><ol><li><p>首先将网段 192.168.0.0/18 划分为四个子网提供给每个需求完成划分网络工作，表示四个子网只需要两个二进制位即可，意味着我们将网络位延长两位即可达到需求。</p><p>192.168.0.0/20      ~    192.168.15.255/20            //提供给需求一</p><p>192.168.16.0/20    ~    192.168.31.255/20            //提供给需求二</p><p>192.168.32.0/20    ~    192.168.47.255/20            //提供给需求三</p><p>192.168.48.0/20    ~    192.168.63.255/20            //提供给需求四</p></li></ol><p>   ​        需求一需要五个网段，而我们只能将第一个子网划分为八个网段来满足该需求。（无特殊要求下）掩码表示 8 则需要三个二进制位，所以我们将掩码为20的基础上再延长 3 位，将掩码设位 <strong>23</strong>；需求二需要十个网段，同理十个网段需要四个二进制位来表示，掩码设为 <strong>24</strong>；需求三需要二十个网段，同理五个二进制位，掩码设为 <strong>25</strong>；需求四需要四个网段，同理六个二进制位，掩码设为 <strong>26</strong>。</p><h4 id="三、划分结果的IP地址表"><a href="#三、划分结果的IP地址表" class="headerlink" title="三、划分结果的IP地址表"></a>三、划分结果的IP地址表</h4><p>需求一：</p><p>​        根据划分步骤我们将网段分为 8 个掩码为 23 （后面表示过程中，已经描述网络地址、广播地址，不会再单独写出可用地址范围，排除网络地址、广播地址即可）</p><p>192.168.0.0-1.255/23                可用地址范围：192.168.0.1/23 ~ 192.168.1.254/23</p><p>192.168.2.0-3.255/23                可用地址范围：192.168.2.1/23 ~ 192.168.3.254/23</p><p>192.168.4.0-5.255/23                可用地址范围：192.168.4.1/23 ~ 192.168.5.254/23        </p><p>192.168.6.0-7.255/23                可用地址范围：192.168.6.1/23 ~ 192.168.7.254/23</p><p>192.168.8.0-9.255/23                可用地址范围：192.168.8.1/23 ~ 192.168.9.254/23</p><p>192.168.10.0-11.255/23            可用地址范围：192.168.10.1/23 ~ 192.168.11.254/23</p><p>192.168.12.0-13.255/23            可用地址范围：192.168.12.1/23 ~ 192.168.13.254/23</p><p>192.168.14.0-15.255/23            可用地址范围：192.168.14.1/23 ~ 192.168.15.254/23</p><p>需求二：</p><p>192.168.16.0-16.255/24    192.168.17.0-17.255/24    192.168.18.0-18.255/24    192.168.19.0-19.255/24</p><p>192.168.20.0-20.255/24    192.168.21.0-21.255/24    192.168.22.0-22.255/24    192.168.23.0-23.255/24</p><p>192.168.24.0-24.255/24    192.168.25.0-25.255/24    192.168.26.0-26.255/24    192.168.27.0-27.255/24</p><p>192.168.28.0-28.255/24    192.168.29.0-29.255/24    192.168.30.0-30.255/24    192.168.31.0-31.255/24</p><p>需求三：</p><p>192.168.32.0-127/25    192.168.32.128-255/25    192.168.33.0-127/25    192.168.33.128-255/25</p><p>192.168.34.0-127/25    192.168.34.128-255/25    192.168.35.0-127/25    192.168.35.128-255/25</p><p>192.168.36.0-127/25    192.168.36.128-255/25    192.168.37.0-127/25    192.168.37.128-255/25</p><p>192.168.38.0-127/25    192.168.38.128-255/25    192.168.39.0-127/25    192.168.39.128-255/25</p><p>192.168.40.0-127/25    192.168.40.128-255/25    192.168.41.0-127/25    192.168.41.128-255/25</p><p>192.168.42.0-127/25    192.168.42.128-255/25    192.168.43.0-127/25    192.168.43.128-255/25</p><p>192.168.44.0-127/25    192.168.44.128-255/25    192.168.45.0-127/25    192.168.45.127-255/25</p><p>192.168.46.0-127/25    192.168.46.128-255/25    192.168.47.0-127/25    192.168.47.128-255/25</p><p>需求四：</p><p>192.168.48.0-63/26    192.168.48.64-127/26    192.168.48.128-191/26    192.168.48.192-255/26</p><p>192.168.49.0-63/26    192.168.49.64-127/26    192.168.49.128-191/26    192.168.49.192-255/26</p><p>192.168.50.0-63/26    192.168.50.64-127/26    192.168.50.128-191/26    192.168.40.192-255/26</p><p>192.168.51.0-63/26    192.168.51.64-127/26    192.168.51.128-191/26    192.168.51.192-255/26</p><p>192.168.52.0-63/26    192.168.52.64-127/26    192.168.52.128-191/26    192.168.52.192-255/26</p><p>192.168.53.0-63/26    192.168.53.64-127/26    192.168.53.128-191/26    192.168.53.192-255/26    </p><p>192.168.54.0-63/26    192.168.54.64-127/26    192.168.54.128-191/26    192.168.54.192-255/26</p><p>192.168.55.0-63/26    192.168.55.64-127/26    192.168.55.128-191/26    192.168.55.192-255/26</p><p>192.168.56.0-63/26    192.168.56.64-127/26    192.168.56.128-191/26    192.168.56.192-255/26</p><p>192.168.57.0-63/26    192.168.57.64-127/26    192.168.57.128-191/26    192.168.57.192-255/26</p><p>192.168.58.0-63/26    192.168.58.64-127/26    192.168.58.128-191/26    192.168.58.192-255/26</p><p>192.168.59.0-63/26    192.168.59.64-127/26    192.168.59.128-191/26    192.168.59.192-255/26</p><p>192.168.60.0-63/26    192.168.60.64-127/26    192.168.60.128-191/26    192.168.60.192-255/26</p><p>192.168.61.0-63/26    192.168.61.64-127/26    192.168.61.128-191/26    192.168.61.192-255/26</p><p>192.168.62.0-63/26    192.168.62.64-127/26    192.168.62.128-191/26    192.168.62.192-255/26</p><p>192.168.63.0-63/26    192.168.63.64-127/26    192.168.63.128-191/26    192.168.63.192-255/26</p><h2 id="理论验证作业一"><a href="#理论验证作业一" class="headerlink" title="理论验证作业一"></a>理论验证作业一</h2><h4 id="一、实验猜想"><a href="#一、实验猜想" class="headerlink" title="一、实验猜想"></a>一、实验猜想</h4><p>​        提问：两台主机通过一台路由器互联，当两台主机的MAC地址一致时是否影响网络互通？</p><h4 id="二、理论推理结果"><a href="#二、理论推理结果" class="headerlink" title="二、理论推理结果"></a>二、理论推理结果</h4><p>​        在主机设置路由接口为网关的前提下，我们的注意力放在MAC地址一致的问题。MAC地址一致无疑会影响二层交换层面转发数据，那这会不会同样对路由器生效？（普遍视角是 数据收发的过程都经过了二层）        那么我的看法是，PC1将数据包发出，源IP、源MAC是自己，目的IP是PC2，目的MAC是网关。然后路由器收到这个数据包的同时记录下该数据源地址的IP与MAC地址映射关系，同时发现目的IP不是自己，则根据路由表转发。在查表转发的过程中发现去该IP网段的下一跳时本地直连的网段，于是准备通过该直连接口将数据发出；在发出数据包之前，路由器会更改源目MAC。这是这个问题的核心争议点：我认为，路由器只是通过学习到的MAC、IP映射关系来封装数据包，真正做转发动作的不是交换动作而是路由引擎查表转发的动作。这个动作中，MAC与IP映射关系只起到了一个封装数据包的作用，并不能影响路由器转发平面的决策。</p><h4 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h4><p>​           <img src="/2019/05/09/网络层笔记/tu1.jpg"></p><h4 id="四、实验操作"><a href="#四、实验操作" class="headerlink" title="四、实验操作"></a>四、实验操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[R1]int g0/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[R1-GigabitEthernet0/<span class="number">0</span>/<span class="number">0</span>]ip ad <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span> <span class="number">24</span></span><br><span class="line">[R1-GigabitEthernet0/<span class="number">0</span>/<span class="number">0</span>]int g0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">[R1-GigabitEthernet0/<span class="number">0</span>/<span class="number">1</span>]ip ad <span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line">PC&gt;ping <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">Ping <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>: <span class="number">32</span> data bytes, Press Ctrl_C to <span class="keyword">break</span></span><br><span class="line">Request timeout!</span><br><span class="line">From <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">2</span> ttl=<span class="number">127</span> time=<span class="number">15</span> ms</span><br><span class="line">From <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">3</span> ttl=<span class="number">127</span> time&lt;<span class="number">1</span> ms</span><br><span class="line">From <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">4</span> ttl=<span class="number">127</span> time=<span class="number">16</span> ms</span><br><span class="line">From <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>: bytes=<span class="number">32</span> seq=<span class="number">5</span> ttl=<span class="number">127</span> time=<span class="number">16</span> ms</span><br><span class="line"></span><br><span class="line">--- <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> ping statistics ---</span><br><span class="line">  <span class="number">5</span> packet(s) transmitted</span><br><span class="line">  <span class="number">4</span> packet(s) received</span><br><span class="line">  <span class="number">20.00</span>% packet loss</span><br><span class="line">  round-trip min/avg/max = <span class="number">0</span>/<span class="number">11</span>/<span class="number">16</span> ms</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[R1]dis arp </span><br><span class="line">IP ADDRESS      MAC ADDRESS     EXPIRE(M) TYPE        INTERFACE   VPN-INSTANCE </span><br><span class="line">                                          VLAN/CEVLAN PVC                      </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span>   <span class="number">00e0</span>-fc50<span class="number">-6</span>d05            I -         GE0/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>     <span class="number">5489</span><span class="number">-9893</span><span class="number">-4885</span>  <span class="number">18</span>        D<span class="number">-0</span>         GE0/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.254</span>   <span class="number">00e0</span>-fc50<span class="number">-6</span>d06            I -         GE0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>     <span class="number">5489</span><span class="number">-9893</span><span class="number">-4885</span>  <span class="number">18</span>        D<span class="number">-0</span>         GE0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">Total:<span class="number">4</span>         Dynamic:<span class="number">2</span>       Static:<span class="number">0</span>     Interface:<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="五、实验验证总结"><a href="#五、实验验证总结" class="headerlink" title="五、实验验证总结"></a>五、实验验证总结</h4><p>​        理论推理结果部分证实了一些，即使不同网段MAC地址映射关系起冲突，路由器转发层面决策并不会受此影响，在发出数据包的时候该表起的作用是将MAC地址填入目的MAC地址。</p><h2 id="理论验证作业二"><a href="#理论验证作业二" class="headerlink" title="理论验证作业二"></a>理论验证作业二</h2><h4 id="一、实验猜想-1"><a href="#一、实验猜想-1" class="headerlink" title="一、实验猜想"></a>一、实验猜想</h4><p>​        通配符掩码在 ACL 中与掩码点分十进制表示方法一样，但是 0 和 1 可以不连续。通过置为 1 的位去匹配IP地址。</p><h4 id="二、理论推理结果-1"><a href="#二、理论推理结果-1" class="headerlink" title="二、理论推理结果"></a>二、理论推理结果</h4><p>​        以前我总觉得反掩码和通配符是一个东西。所以我现在需要通过OSPF中的反掩码和ACL中的反掩码来验证，以及在我看到的资料中显示：反掩码的 1 在每一段 8 位中是必须连续的。</p><h4 id="三、实验环境-1"><a href="#三、实验环境-1" class="headerlink" title="三、实验环境"></a>三、实验环境</h4><p>​        就用上面的图….</p><h4 id="四、实验操作-1"><a href="#四、实验操作-1" class="headerlink" title="四、实验操作"></a>四、实验操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[R1]acl <span class="number">2000</span></span><br><span class="line">[R1-acl-basic<span class="number">-2000</span>]rule <span class="number">10</span> deny source <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.5</span> </span><br><span class="line">[R1]int g0/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[R1-GigabitEthernet0/<span class="number">0</span>/<span class="number">0</span>]traffic-filter inbound  acl <span class="number">2000</span> </span><br><span class="line"></span><br><span class="line">PC&gt;ping <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">Ping <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span>: <span class="number">32</span> data bytes, Press Ctrl_C to <span class="keyword">break</span></span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line">Request timeout!</span><br><span class="line"></span><br><span class="line">--- <span class="number">192.168</span><span class="number">.2</span><span class="number">.1</span> ping statistics ---</span><br><span class="line">  <span class="number">5</span> packet(s) transmitted</span><br><span class="line">  <span class="number">0</span> packet(s) received</span><br><span class="line">  <span class="number">100.00</span>% packet loss</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">[R1-ospf<span class="number">-1</span>-area<span class="number">-0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.5</span></span><br><span class="line"><span class="built_in">Error</span>: The network mask is invalid because the network mask must be consecutive.</span><br><span class="line"><span class="comment">//报错消息</span></span><br><span class="line">[R1-ospf<span class="number">-1</span>-area<span class="number">-0.0</span><span class="number">.0</span><span class="number">.0</span>]network <span class="number">192.168</span><span class="number">.1</span><span class="number">.254</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line">[R1-ospf<span class="number">-1</span>-area<span class="number">-0.0</span><span class="number">.0</span><span class="number">.0</span>] <span class="comment">//没有报错</span></span><br></pre></td></tr></table></figure><h4 id="五、实验验证总结-1"><a href="#五、实验验证总结-1" class="headerlink" title="五、实验验证总结"></a>五、实验验证总结</h4><p>​        在ACL中的是通配符掩码（不是真正的通配符），OSPF配置中的是反掩码。反掩码确实不能写不连续的1 。 而通配符掩码则可以</p><h2 id="MAC地址的作用"><a href="#MAC地址的作用" class="headerlink" title="MAC地址的作用"></a>MAC地址的作用</h2><p>（以下是个人对于问题思考的心路历程，欢迎一起讨论）</p><p>​        其实 MAC 地址的作用我们都知道是唯一标识一台设备，通过设备出厂时在对应的网络硬件中烧录固定不重复的 MAC 地址来标识。那么我们可能会说有 IP 地址了，还要MAC地址？我们都知道路由器可以根据IP地址来将数据转发到目的地，但是我们深入考虑一个问题：假如路由器这个出接口所在的网段有很多同网段的设备，那路由器根据转发原理（查路由表，直到查到下一跳是直连路由，然后从这个直连路由的接口出去）将数据从这个接口发出去，但是这个时候路由器要怎么确定我的数据是发给谁呢？假设路由更详细，对每一台同网段的设备都有32位的明细路由，但是出接口就那么一个，路由该怎么保证这个数据是发给谁的呢？也许你会说目的IP地址已经描述清楚了。那在同网段转发中（那么多设备链接的网线也需要有一台设备来连接并且转发），这台设备该怎么将数据包转发到对应的链路呢？如果还是走三层转发那就会回到我们前面的问题。所以 MAC 地址在一定程度解决了这个问题，MAC 地址只需要协助设备完成该网段/LAN 的数据转发，就能在不影响路由器的情况下完成这个任务。</p><p>​        我们再换一种情况，链路采用串行链路。串行链路的特点是线连接的两端不是 A 就是 B ，所以我只要将数据从这个接口发出去，就能确保数据发送后只有对方接收。因此这个时候是不需要 MAC 地址就能确保数据转发在上面遇到的问题。</p><p>​        总结一下，问题就是路由器在同网段的出接口一致，该数据需要有设备来负责在同网段/LAN 中来将数据交给对应的设备。而 MAC 地址恰好就可以在不影响现有条件的情况下解决这个问题。</p><h2 id="每日学习总结"><a href="#每日学习总结" class="headerlink" title="每日学习总结"></a>每日学习总结</h2><p>​        网络层：作用有定义IP 、选路/寻址。接下来我会围绕这两个东西来总结网络层中的IP。</p><p>​        IP地址具有对设备起到定位的作用，是通信双方能够根据这个东西找到对方。而IP地址以点分十进制的形式来表示，本质是由32个二进制位组成。</p><p>​        IP地址最初被分为A、B、C、D、E。IP还有一个重要的东西，那就是子网掩码，用来标识网络位和主机位，网络位可以在路由中帮助数据找到去目的地的路，主机位可以具体指明是哪一台主机。而子网掩码除了根据A、B、C（分别固定为8位、16位、24位），还有两个概念，1.可变长子网掩码 2.CIDR路由汇总。前者可以更细分的划分更小的网段。路由汇总可以让更多的相同前缀路由条目汇合成更少的路由。</p><p>​        IP中还有一些比较重要的东西，反掩码。反掩码可以用来匹配IP地址，反掩码跟子网掩码不仅仅是倒过来的区别，而是可以由不连续的 1 和 0 来匹配对应的多条路由。</p><p>​        IP地址为什么唯一？IP需要在私网和公网中唯一（通信中如果不唯一会造成数据发错对象的问题，私有地址在以后会提，感兴趣的小伙伴可以自行了解。），</p><p>​        寻址–&gt; 路由表RIB –&gt; 直连、非直连，这个过程称之为递归路由，这种操作如果有一定程度了解的人会知道，虽然递归路由在普通情况会导致性能降低，但是如果递归的底层路由是通过动态路由协议冗余备份的话可以起到防止下一跳突然DOWN掉，导致原先发的数据会丢失掉。路由协议分为静态和动态。静态  递归  先判断可达 再看最优 符合就加入路由表 </p>]]></content>
      
      
      <categories>
          
          <category> HuaWei Routing &amp; Switch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCIP综合实验文档</title>
      <link href="/2019/04/28/HCIP%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E6%96%87%E6%A1%A3/"/>
      <url>/2019/04/28/HCIP%E7%BB%BC%E5%90%88%E5%AE%9E%E9%AA%8C%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="HCIP综合实验文档"><a href="#HCIP综合实验文档" class="headerlink" title="HCIP综合实验文档"></a>HCIP综合实验文档</h1><h2 id="实验需求"><a href="#实验需求" class="headerlink" title="实验需求"></a>实验需求</h2><ol><li>全网依照拓扑图配置vlan和IP地址</li></ol><ol start="2"><li><p>总公司：</p><p>a)  SW3和SW4的互连接口启用eth-trunk，最大带宽为2G</p><p>b)  SW1、SW2、SW3、和SW4运行MSTP，SW1为VLAN10的Root，SW2为VLAN20的Root</p><p>c)  PC1-PC4需要提供网关冗余，为了提高安全性，需要做认证，并使用BFD动态检查上行链路状态，实现自动切换</p></li></ol><ol start="3"><li><p>AS100需求：</p><p>a)  每台设备都需要配置Loopback接口，地址为X.X.X.X（X为设备编号）</p><p>b)  AS100底层IGP协议为IS-IS，区域为level-2，确保各路由器的loopback接口互通</p><p>c)  R1与R4建立IBGP邻居（使用loopback接口）</p><p>d)  MPLS-VPN需求：</p><ol><li><p>总公司的PC能访问分公司1/2的PC，分公司之间不能互访</p></li><li><p>R1和SW3、SW4之间运行OSPF协议</p></li><li><p>R4和R5之间运行BGP协议</p></li><li><p>R4和R6之间运行OSPF协议</p></li><li><p>R1和R4建立MP-BGP邻居</p></li></ol></li></ol><ol start="4"><li><p>分公司1需求：</p><p>a)  SW5为二层交换机，PC5与PC6配置不同VLAN（属于不同网段），确保两台PC能互访</p></li><li><p>分公司2需求：</p><p>a)  PC8与PC7属于不同VLAN（相同网段），通过VLANIF技术让两台PC正常访问总公司，但是不能互访</p><p>b)  内部IGP运行OSPF协议，为了加快收敛速度，每网段不允许存在DR</p></li></ol><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><img src="/2019/04/28/HCIP综合实验文档/HCIP.png" alt></p><h2 id="实验思路分析"><a href="#实验思路分析" class="headerlink" title="实验思路分析"></a>实验思路分析</h2><p>​        该实验拓扑结合需求来看，分为三个内网，要通过MPLS VPN 来实现互访的需求，也就是说 我们需要先解决三个内网的访问需求再来 AS 100 上做路由 MPLS 、BGP等配置。所以我将实验拆分为三个内网的配置部分，内网接入公网部分、公网部分一共五个部分来做。</p><h2 id="业务网段规划"><a href="#业务网段规划" class="headerlink" title="业务网段规划"></a>业务网段规划</h2><table><thead><tr><th>业务网段主机</th><th>所属 VLAN</th><th>IP地址</th><th>网关</th></tr></thead><tbody><tr><td>总公司 PC1</td><td>VLAN 100</td><td>192.168.10.1/24</td><td>192.168.10.254</td></tr><tr><td>总公司 PC2</td><td>VLAN 200</td><td>192.168.20.1/24</td><td>192.168.20.254</td></tr><tr><td>总公司 PC3</td><td>VLAN 100</td><td>192.168.10.2/24</td><td>192.168.10.254</td></tr><tr><td>总公司 PC4</td><td>VLAN 200</td><td>192.168.20.2/24</td><td>192.168.20.254</td></tr><tr><td>分公司-1 PC5</td><td>VLAN 10</td><td>192.168.110.1/24</td><td>192.168.110.254</td></tr><tr><td>分公司-1 PC6</td><td>VLAN 20</td><td>192.168.120.1/24</td><td>192.168.120.254</td></tr><tr><td>分公司-2 PC7</td><td>VLAN 10</td><td>192.168.200.1/24</td><td>192.168.200.254</td></tr><tr><td>分公司-3 PC8</td><td>VLAN 20</td><td>192.168.200.2/24</td><td>192.168.200.254</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="1、配置总公司部分"><a href="#1、配置总公司部分" class="headerlink" title="1、配置总公司部分"></a>1、配置总公司部分</h3><h4 id="VLAN-部分"><a href="#VLAN-部分" class="headerlink" title="VLAN 部分"></a>VLAN 部分</h4><p>​        <strong>SW1</strong> 和 <strong>SW2</strong> 的配置很简单 ：在用户接入接口配置对应的 Access 类型 VLAN。SW1 和 SW2连接主机的接口为 Access，连接三层交换机的接口配置为 Trunk 类型 并允许所有 VLAN 通过。下图SW1的配置文件作为参考 （所有交换机都先要创建好VLAN 再进行配置，以此实验为例，先在四台交换机上创建好VLAN 100、200 再开始其他配置，不要出现交换机上创建的VLAN 不一致的情况，要向配置路由器一样先去创建好VLAN）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan <span class="number">2</span> to <span class="number">4094</span></span><br><span class="line">#</span><br><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan <span class="number">2</span> to <span class="number">4094</span></span><br><span class="line">#</span><br><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line"> port link-type access</span><br><span class="line"> port <span class="keyword">default</span> vlan <span class="number">100</span></span><br><span class="line">#</span><br><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">4</span></span><br><span class="line"> port link-type access</span><br><span class="line"> port <span class="keyword">default</span> vlan <span class="number">200</span></span><br></pre></td></tr></table></figure><p>​        <strong>SW3、SW4</strong> 上只需对连接到 二层交换机 的接口配置为  Trunk 类型并且允许所有VLAN 通过即可，以SW3配置文件为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan <span class="number">2</span> to <span class="number">4094</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan <span class="number">2</span> to <span class="number">4094</span></span><br></pre></td></tr></table></figure><p>VLAN 部分配置即结束</p><h4 id="配置生成树部分"><a href="#配置生成树部分" class="headerlink" title="配置生成树部分"></a>配置生成树部分</h4><p>​        四台交换机都必须参与到生成树的计算机中来，需求是多实例生成树，所以我们要配置MSTP。多实例生成树也要向VLAN一样，首先要确定参与生成树计算的交换机 实例与VLAN 的绑定配置一致。一致之后再来自主选择根桥，以SW3的配置文件为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stp region-configuration                    <span class="comment">//进入生成树的配置，默认就是MSTP</span></span><br><span class="line"> region-name chenliang                      <span class="comment">//配置MSTP的域名，可不配，配就要都同步</span></span><br><span class="line"> instance <span class="number">1</span> vlan <span class="number">100</span>                        <span class="comment">//实例 1 与 VLAN 100 绑定，针对VLAN100单独计算</span></span><br><span class="line"> instance <span class="number">2</span> vlan <span class="number">200</span>                        </span><br><span class="line"> active region-configuration                <span class="comment">//提交配置生效</span></span><br><span class="line"></span><br><span class="line">stp instance <span class="number">1</span> root primary                 <span class="comment">//设置该交换机成为实例 1 的根桥</span></span><br><span class="line">stp instance <span class="number">2</span> root secondary               <span class="comment">//设置该交换机成为实例 2 的备份根桥</span></span><br></pre></td></tr></table></figure><h4 id="配置链路聚合部分"><a href="#配置链路聚合部分" class="headerlink" title="配置链路聚合部分"></a>配置链路聚合部分</h4><p>​        链路聚合创建聚合接口，然后将物理接口加入这个聚合组即可，最后通过一条命令来限制链路聚合的上限带宽为2G，以SW3的配置为例，SW4照常。（SW3是G口，一个接口的速率为1G，所以我们设置阈值为2）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Eth-Trunk0                                <span class="comment">//创建聚合组接口</span></span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan <span class="number">2</span> to <span class="number">4094</span></span><br><span class="line"> max bandwidth-affected-linknumber <span class="number">2</span>                <span class="comment">//限制带宽的链路Up 上限阈值</span></span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"> eth-trunk <span class="number">0</span>                                        <span class="comment">//加入聚合组接口</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">4</span></span><br><span class="line"> eth-trunk <span class="number">0</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">5</span></span><br><span class="line"> eth-trunk <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="VRRP与BFD联动配置部分"><a href="#VRRP与BFD联动配置部分" class="headerlink" title="VRRP与BFD联动配置部分"></a>VRRP与BFD联动配置部分</h4><p>​        VRRP用来解决需求中的网关冗余，BFD实现链路检测，与VRRP搭配使用可实现快速的故障网络切换</p><p>​        我们先配置BFD部分，以SW3做一个对连接R1链路的BFD配置文件为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//R3的配置文件部分（先要执行BFD来全局使能，peer-ip是对端IP 接口是本端接口）</span></span><br><span class="line">bfd <span class="number">13</span> bind peer-ip <span class="number">192.168</span><span class="number">.13</span><span class="number">.1</span> interface Vlanif1 source-ip <span class="number">192.168</span><span class="number">.13</span><span class="number">.3</span></span><br><span class="line"> discriminator local <span class="number">13</span>                   <span class="comment">//本地标识符</span></span><br><span class="line"> discriminator remote <span class="number">131</span>                 <span class="comment">//对端标识符</span></span><br><span class="line"> commit                                   <span class="comment">//提交配置</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//R1的配置文件部分</span></span><br><span class="line"> bfd <span class="number">14</span> bind peer-ip <span class="number">192.168</span><span class="number">.14</span><span class="number">.4</span> vpn-instance <span class="number">2</span> interface GigabitEthernet0/<span class="number">0</span>/<span class="number">1</span> s</span><br><span class="line">ource-ip <span class="number">192.168</span><span class="number">.14</span><span class="number">.1</span></span><br><span class="line"> discriminator local <span class="number">1</span></span><br><span class="line"> discriminator remote <span class="number">14</span></span><br><span class="line"> commit</span><br></pre></td></tr></table></figure><p>​        然后配置VRRP 部分，配置后，让VRRP 与BFD 进行一个联动，通过BFD检测链路信息的反馈来实现VRRP 网关故障的快速切换，SW3要实现VLAN 100的网关为主，VLAN 200的网关为备份。以SW3的配置文件为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Vlanif100</span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.10</span><span class="number">.252</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"> vrrp vrid <span class="number">1</span> virtual-ip <span class="number">192.168</span><span class="number">.10</span><span class="number">.254</span>              <span class="comment">//创建一个虚拟网关路由器，IP为 10.254</span></span><br><span class="line"> vrrp vrid <span class="number">1</span> priority <span class="number">240</span>                           <span class="comment">//设置本地在虚拟网关路由器 1 上的优先级</span></span><br><span class="line"> vrrp vrid <span class="number">1</span> track bfd-session <span class="number">13</span> reduced <span class="number">200</span>       <span class="comment">//追踪BFD检测的结果，故障则优先级减少200</span></span><br><span class="line"> vrrp vrid <span class="number">1</span> authentication-mode simple <span class="number">123456</span>      <span class="comment">//配置认证，密码为123456</span></span><br><span class="line">#</span><br><span class="line">interface Vlanif200</span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.20</span><span class="number">.252</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"> vrrp vrid <span class="number">2</span> virtual-ip <span class="number">192.168</span><span class="number">.20</span><span class="number">.254</span></span><br></pre></td></tr></table></figure><p>总公司内网配置完成。</p><h3 id="2、配置分公司-1-部分"><a href="#2、配置分公司-1-部分" class="headerlink" title="2、配置分公司-1 部分"></a>2、配置分公司-1 部分</h3><h4 id="VLAN部分"><a href="#VLAN部分" class="headerlink" title="VLAN部分"></a>VLAN部分</h4><p>​        SW5部分配置比较简单，创建VLAN 10 和 20 ，然后上行链路配置为 Trunk 类型允许所有VLAN 通过即可，SW5的配置文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"> port link-type trunk</span><br><span class="line"> port trunk allow-pass vlan <span class="number">2</span> to <span class="number">4094</span></span><br><span class="line"></span><br><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line"> port link-type access</span><br><span class="line"> port <span class="keyword">default</span> vlan <span class="number">10</span></span><br><span class="line"> </span><br><span class="line">interface Ethernet0/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line"> port link-type access</span><br><span class="line"> port <span class="keyword">default</span> vlan <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="单臂路由部分"><a href="#单臂路由部分" class="headerlink" title="单臂路由部分"></a>单臂路由部分</h4><p>​        这部分的操作不会太多，不同VLAN不同网段的互访可以使用单臂路由来解决。仅仅是创建子接口，然后子接口使其能够处理802.1q的帧。然后开启子接口下的ARP广播功能，R5的配置文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">1.10</span>                   <span class="comment">//直接进入接口即可创建子接口</span></span><br><span class="line"> dot1q termination vid <span class="number">10</span>                           <span class="comment">//能够处理VLAN 10 的 802.1q的帧</span></span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.110</span><span class="number">.254</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> </span><br><span class="line"> arp broadcast enable                               <span class="comment">//ARP广播开启</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">1.20</span></span><br><span class="line"> dot1q termination vid <span class="number">20</span></span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.120</span><span class="number">.254</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> </span><br><span class="line"> arp broadcast enable</span><br></pre></td></tr></table></figure><p>分公司-2部分结束</p><h3 id="3、配置分公司-2-部分"><a href="#3、配置分公司-2-部分" class="headerlink" title="3、配置分公司-2 部分"></a>3、配置分公司-2 部分</h3><h4 id="VLAN配置部分"><a href="#VLAN配置部分" class="headerlink" title="VLAN配置部分"></a>VLAN配置部分</h4><p>​        SW7 创建VLAN10、20、30，然后将连接的PC机划分至对应的VLAN。既然同网段不同VLAN的网络要访问外网就需要共一个网关，那我们就可以用聚合VLAN来解决这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface Vlanif30</span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.200</span><span class="number">.254</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">2</span></span><br><span class="line"> port link-type access</span><br><span class="line"> port <span class="keyword">default</span> vlan <span class="number">20</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">3</span></span><br><span class="line"> port link-type access</span><br><span class="line"> port <span class="keyword">default</span> vlan <span class="number">10</span></span><br><span class="line"></span><br><span class="line">vlan <span class="number">30</span></span><br><span class="line"> aggregate-vlan                       <span class="comment">//设置该VLAN为聚合VLAN</span></span><br><span class="line"> access-vlan <span class="number">10</span> <span class="number">20</span>                    <span class="comment">//将子VLAN 10 和 20 划分到 VLAN30中</span></span><br></pre></td></tr></table></figure><h4 id="IGP配置部分"><a href="#IGP配置部分" class="headerlink" title="IGP配置部分"></a>IGP配置部分</h4><p>​        简单的配置OSPF不是问题，问题是在不改动拓扑的情况下来实现OSPF中不选DR，不存在的DR的情况只可能是链路是P2P类型，这件事情只需要一条命令即可解决。以SW7配置文件部分为例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ospf <span class="number">200</span> router-id <span class="number">7.7</span><span class="number">.7</span><span class="number">.7</span></span><br><span class="line"> area <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.200</span><span class="number">.254</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.67</span><span class="number">.7</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">interface Vlanif1</span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.67</span><span class="number">.7</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"> ospf network-type p2p                               <span class="comment">//设置该接口在OSPF中为P2P类型</span></span><br></pre></td></tr></table></figure><p>分公司-2部分结束</p><h3 id="4、配置-VPN-实例部分"><a href="#4、配置-VPN-实例部分" class="headerlink" title="4、配置  VPN 实例部分"></a>4、配置  VPN 实例部分</h3><h4 id="VPN-实例配置部分"><a href="#VPN-实例配置部分" class="headerlink" title="VPN 实例配置部分"></a>VPN 实例配置部分</h4><p>​        创建多个VPN 实例，并基于 VPN 实例来配置路由部分， 为后面配置MPLS VPN 、 MP-BGP做准备</p><p>​        以R1为例子，我们创建一个VPN instance 1 与 SW3 连接的接口绑定，实例2 与 SW4连接的接口绑定，关于RD RT的分配， 总公司的RD 为 100：1和200：1 ，总公司路由出去的时候RT为1000：1，分公司的RD 分别为110：1、120：1。 分公司路由出去的时候RT分别为1100：1、1200：1。</p><p>（之所以前面将总公司的路由用两个不同的RD来区分路由就是为了将双出口的路由区分开，否则当VRRP震荡，R4上关于总公司的两条BGP路由会被当成一条路由撤销，当RD区分成两条不同的路由后，VRRP的震荡不会导致路由直接丢失）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//R1的配置</span></span><br><span class="line">ip vpn-instance <span class="number">1</span>                                     <span class="comment">//该实例绑定到G0/0/0接口</span></span><br><span class="line"> ipv4-family</span><br><span class="line">  route-distinguisher <span class="number">100</span>:<span class="number">1</span>                           <span class="comment">//设置RD，作用是区分路由</span></span><br><span class="line">  vpn-target <span class="number">1000</span>:<span class="number">1</span> <span class="keyword">export</span>-extcommunity               <span class="comment">//路由出去的时候RT值</span></span><br><span class="line">  vpn-target <span class="number">1100</span>:<span class="number">1</span> <span class="number">1200</span>:<span class="number">1</span> <span class="keyword">import</span>-extcommunity        <span class="comment">//允许的RT值路由才会加入VRF</span></span><br><span class="line">#</span><br><span class="line">ip vpn-instance <span class="number">2</span>                                     <span class="comment">//该实例绑定到G0/0/1接口</span></span><br><span class="line"> ipv4-family</span><br><span class="line">  route-distinguisher <span class="number">200</span>:<span class="number">1</span></span><br><span class="line">  vpn-target <span class="number">1000</span>:<span class="number">1</span> <span class="keyword">export</span>-extcommunity</span><br><span class="line">  vpn-target <span class="number">1100</span>:<span class="number">1</span> <span class="number">1200</span>:<span class="number">1</span> <span class="keyword">import</span>-extcommunity</span><br><span class="line">  </span><br><span class="line"><span class="comment">//R4的配置</span></span><br><span class="line">ip vpn-instance <span class="number">1</span>                                     <span class="comment">//该实例绑定到G0/0/2接口</span></span><br><span class="line"> ipv4-family</span><br><span class="line">  route-distinguisher <span class="number">110</span>:<span class="number">1</span></span><br><span class="line">  vpn-target <span class="number">1100</span>:<span class="number">1</span> <span class="keyword">export</span>-extcommunity</span><br><span class="line">  vpn-target <span class="number">1000</span>:<span class="number">1</span> <span class="keyword">import</span>-extcommunity</span><br><span class="line">#</span><br><span class="line">ip vpn-instance <span class="number">2</span>                                     <span class="comment">//该实例绑定到G4/0/0接口</span></span><br><span class="line"> ipv4-family</span><br><span class="line">  route-distinguisher <span class="number">120</span>:<span class="number">1</span></span><br><span class="line">  vpn-target <span class="number">1200</span>:<span class="number">1</span> <span class="keyword">export</span>-extcommunity</span><br><span class="line">  vpn-target <span class="number">1000</span>:<span class="number">1</span> <span class="keyword">import</span>-extcommunity</span><br></pre></td></tr></table></figure><h4 id="总公司接入公网部分"><a href="#总公司接入公网部分" class="headerlink" title="总公司接入公网部分"></a>总公司接入公网部分</h4><p>​        跟平时一样采用OSPF完成IGP互联，不同点是R1运行的OSPF是基于VPN实例。总公司接入公网的方式采用双接口接入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SW3上的配置</span></span><br><span class="line">ospf <span class="number">100</span> router-id <span class="number">192.168</span><span class="number">.13</span><span class="number">.3</span></span><br><span class="line"> area <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.13</span><span class="number">.3</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.10</span><span class="number">.252</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.20</span><span class="number">.252</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">#</span><br><span class="line"><span class="comment">//SW4上的配置</span></span><br><span class="line">ospf <span class="number">200</span> router-id <span class="number">192.168</span><span class="number">.14</span><span class="number">.4</span></span><br><span class="line"> area <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.14</span><span class="number">.4</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.10</span><span class="number">.253</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  network <span class="number">192.168</span><span class="number">.20</span><span class="number">.253</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h4 id="分公司2接入部分"><a href="#分公司2接入部分" class="headerlink" title="分公司2接入部分"></a>分公司2接入部分</h4><p>​        R4与R6基于VPN实例建立OSPF邻居没什么，如果要网段中不允许存在DR，我们就需要修改OSPF的默认链路类型为P2P。（OSPF网络中的每个接口都要配置链路类型，这样的话不用修改链路），下图为R6</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> ip address <span class="number">10.1</span><span class="number">.46</span><span class="number">.6</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> </span><br><span class="line"> ospf network-type p2p                         <span class="comment">//手动修改链路类型为P2P</span></span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0/<span class="number">0</span>/<span class="number">1</span></span><br><span class="line"> ip address <span class="number">192.168</span><span class="number">.67</span><span class="number">.6</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> </span><br><span class="line"> ospf network-type p2p</span><br><span class="line"></span><br><span class="line">ospf <span class="number">200</span> router-id <span class="number">6.6</span><span class="number">.6</span><span class="number">.6</span> </span><br><span class="line"> area <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br><span class="line">  network <span class="number">10.1</span><span class="number">.46</span><span class="number">.6</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br><span class="line">  network <span class="number">192.168</span><span class="number">.67</span><span class="number">.6</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="5、配置-AS-100-部分"><a href="#5、配置-AS-100-部分" class="headerlink" title="5、配置 AS 100 部分"></a>5、配置 AS 100 部分</h3><h4 id="R1-R4配置部分"><a href="#R1-R4配置部分" class="headerlink" title="R1-R4配置部分"></a>R1-R4配置部分</h4><p>​        IGP、MPLS、BGP部分暂时略过，IGP采用IS-IS建立 level-2 的邻居 。MPLS采用 LDP 动态标签分发。重点要说一下 BGP 的配置部分，R1 与 R4建立一个IBGP邻居即可（用环回口建立邻居）。不同点在与 R1 与R4还要建立MP-BGP的邻居来传递VPN实例的路由（R4与 R5的EBGP建立在下一部分说），下面是以R1的配置文件为例子</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//R1</span></span><br><span class="line">bgp <span class="number">100</span></span><br><span class="line"> peer <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span> <span class="keyword">as</span>-number <span class="number">100</span> </span><br><span class="line"> peer <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span> connect-interface LoopBack0                 <span class="comment">//环回口建立邻居</span></span><br><span class="line"> #</span><br><span class="line"> ipv4-family unicast</span><br><span class="line">  undo synchronization</span><br><span class="line">  peer <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span> enable</span><br><span class="line"> # </span><br><span class="line"> ipv4-family vpnv4</span><br><span class="line">  policy vpn-target</span><br><span class="line">  peer <span class="number">4.4</span><span class="number">.4</span><span class="number">.4</span> enable                                      <span class="comment">//使能对端邻居基于VPN实例传递路由</span></span><br><span class="line"> #</span><br><span class="line"> ipv4-family vpn-instance <span class="number">1</span> </span><br><span class="line">  <span class="keyword">import</span>-route ospf <span class="number">100</span>                                    <span class="comment">//引入总公司的OSPF路由</span></span><br><span class="line"> #</span><br><span class="line"> ipv4-family vpn-instance <span class="number">2</span> </span><br><span class="line">  <span class="keyword">import</span>-route ospf <span class="number">200</span></span><br><span class="line">#</span><br></pre></td></tr></table></figure><h4 id="分公司-2接入部分"><a href="#分公司-2接入部分" class="headerlink" title="分公司-2接入部分"></a>分公司-2接入部分</h4><p>​        重点在于基于VPN实例的EBGP的建立方式跟普通EBGP不太一样，变化主要在R4身上。R4配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipv4-family vpn-instance <span class="number">1</span>                    <span class="comment">//在BGP视图下进入VPN实例1来配置EBGP邻居</span></span><br><span class="line"> <span class="keyword">as</span>-number <span class="number">1000</span>                               <span class="comment">//一般这种基于VPN实例的EBGP都要重新分配私网AS号</span></span><br><span class="line"> peer <span class="number">10.1</span><span class="number">.45</span><span class="number">.5</span> <span class="keyword">as</span>-number <span class="number">200</span>                 <span class="comment">//指定邻居</span></span><br></pre></td></tr></table></figure><p>​        （需要注意的是，R5指定EBGP邻居的时候要AS号码应该为你给R4在实例BGP下重新分配的AS号码）</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>​        1、从私网开始配置，私网配置结束再开始配置公网，不管是私网还是公网，从底层开始配置，比如私网部分就是从二层开始配置，二层配置完毕开始配置三层路由协议等等配置，这样一旦网络不通，我们就可以首要排除底层没有问题。否则再配置过程中会出现大量时间用来排错的现象。</p><p>​        2、在该实验中会出现一些从未接触的需求，但是不要着急配，不熟悉的需求一般跟网络互通没有多大关系，所以可以跳过这个需求，把其他网络互通的要求做完了再来针对性的做一些特殊配置，例如本实验中的BFD联动、VRRP认证、不允许存在DR等等，这些要求是不影响配置网络互通的，所以可以留到最后再做。</p>]]></content>
      
      
      <categories>
          
          <category> HuaWei Routing &amp; Switch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验操作 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
